name: Update Version and Tag
on:
  push:
    branches:
      - master

permissions:
  contents: write
  actions: write

jobs:
  update-version-and-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get current version and increment
        id: get_version
        run: |
          # Extract current version
          CURRENT_VERSION=$(grep -oP '(?<=## Version: )\d+\.\d+\.\d+' PeaversTalents.toc)
          if [ -z "$CURRENT_VERSION" ]; then
            echo "Error: Current version not found in TOC file."
            exit 1
          fi
          echo "Current version: $CURRENT_VERSION"

          # Split version into components
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          # Increment PATCH version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"

      - name: Update TOC version
        run: |
          NEW_VERSION="${{ steps.get_version.outputs.new_version }}"
          sed -i "s/^## Version: .*$/## Version: $NEW_VERSION/" PeaversTalents.toc

      - name: Commit TOC changes
        run: |
          git config user.name "Chris Turner"
          git config user.email "peavers@gmail.com"
          git add PeaversTalents.toc
          git commit -m "chore: Update TOC version to ${{ steps.get_version.outputs.new_version }}"
          git push

      - name: Create and push tag
        id: create_tag
        run: |
          NEW_VERSION="${{ steps.get_version.outputs.new_version }}"
          if [ -z "$NEW_VERSION" ]; then
            echo "Error: New version is empty. Exiting."
            exit 1
          fi
          NEW_TAG="PeaversTalents-${NEW_VERSION}"
          if git tag -l | grep -q "^${NEW_TAG}$"; then
            echo "Error: Tag $NEW_TAG already exists. Exiting."
            exit 1
          fi
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Trigger packaging workflow
        run: |
          curl -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/peavers/peavers-talents/actions/workflows/packaging.yml/dispatches \
          -d '{"ref":"master"}'

name: Release Management

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: 'Release notes'
        required: false
        type: string

permissions:
  contents: write
  actions: write

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      should_release: ${{ steps.check.outputs.should_release }}
    steps:
      - name: Debug event info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for relevant changes
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            if git diff-tree --no-commit-id --name-only -r HEAD | grep -E '\.(lua|toc|xml)$'; then
              echo "should_release=true" >> $GITHUB_OUTPUT
            else
              echo "should_release=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Get current version
        id: version
        if: steps.check.outputs.should_release == 'true'
        run: |
          CURRENT_VERSION=$(grep -oP '(?<=## Version: )\d+\.\d+\.\d+' PeaversTalents.toc)

          if [[ ! $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format in TOC file"
            exit 1
          fi

          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

          BUMP_TYPE="${{ github.event.inputs.version_bump }}"
          if [[ "${{ github.event_name }}" != "workflow_dispatch" ]]; then
            BUMP_TYPE="patch"
          fi

          case $BUMP_TYPE in
            "major")
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            "minor")
              NEW_VERSION="${major}.$((minor + 1)).0"
              ;;
            "patch"|*)
              NEW_VERSION="${major}.${minor}.$((patch + 1))"
              ;;
          esac

          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"
          echo "New version: $NEW_VERSION"

  update-and-release:
    needs: prepare-release
    if: needs.prepare-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update TOC version
        run: |
          NEW_VERSION="${{ needs.prepare-release.outputs.new_version }}"
          sed -i "s/^## Version: .*$/## Version: ${NEW_VERSION}/" PeaversTalents.toc

          if ! grep -q "## Version: ${NEW_VERSION}" PeaversTalents.toc; then
            echo "Error: Failed to update version in TOC file"
            exit 1
          fi

      - name: Commit changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add PeaversTalents.toc
          git commit -m "chore: Update TOC version to ${{ needs.prepare-release.outputs.new_version }}"
          git push

      - name: Create tag
        run: |
          TAG_NAME="PeaversTalents-${{ needs.prepare-release.outputs.new_version }}"
          git tag -a "$TAG_NAME" -m "Release ${{ needs.prepare-release.outputs.new_version }}"
          git push origin "$TAG_NAME"

      - name: Package and upload to CurseForge
        uses: BigWigsMods/packager@v2
        env:
          CF_API_KEY: ${{ secrets.CF_API_KEY }}
          GITHUB_OAUTH: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TITLE: "PeaversTalents ${{ needs.prepare-release.outputs.new_version }}"
        with:
          args: -g retail

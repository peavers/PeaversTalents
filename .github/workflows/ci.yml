name: WoW Addon CI/CD

on:
  pull_request:
    types: [ opened, synchronize ]
    branches:
      - master
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  pull-requests: write
  actions: write
  checks: write

jobs:
  # ─────────────────────────────────────────────────────────────
  # 1. Auto-merge: Rebases and auto-merges PRs (if they match criteria)
  # ─────────────────────────────────────────────────────────────
  auto-merge:
    if: >
      github.event_name == 'pull_request' &&
      github.event.pull_request.head.ref == 'feature/update-talent-database' &&
      github.event.pull_request.user.login == github.repository_owner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Enable auto-merge (rebase)
        run: |
          gh auth status
          gh pr merge "${{ github.event.pull_request.number }}" --rebase --auto
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  # ─────────────────────────────────────────────────────────────
  # 2. Version bump & Release: Bumps the version, tags the commit,
  #    pushes it, and then packages & uploads your addon.
  #
  #    Note the job-level condition: for push events it will only run if
  #    the commit message does NOT contain "chore: Update TOC version",
  #    thus preventing the loop.
  # ─────────────────────────────────────────────────────────────
  version_and_release:
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && !contains(github.event.head_commit.message, 'chore: Update TOC version'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code (with full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Determine if version bump is needed
        id: check_changes
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "should_bump=true" >> "$GITHUB_OUTPUT"
          else
            # Look for changes in Lua, TOC, or XML files
            if git diff-tree --no-commit-id --name-only -r HEAD | grep -E '\.(lua|toc|xml)$'; then
              echo "should_bump=true" >> "$GITHUB_OUTPUT"
            else
              echo "should_bump=false" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Bump version and create tag
        if: steps.check_changes.outputs.should_bump == 'true'
        id: bump
        run: |
          # Get current version from TOC file (assumes format "## Version: X.Y.Z")
          CURRENT_VERSION=$(grep -oP '(?<=## Version: )\d+\.\d+\.\d+' PeaversTalents.toc)
          if [[ ! $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format in TOC file"
            exit 1
          fi
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

          # Use input version bump if manually triggered; otherwise default to patch
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            BUMP_TYPE="${{ github.event.inputs.version_bump }}"
          else
            BUMP_TYPE="patch"
          fi

          case $BUMP_TYPE in
            major)
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="${major}.$((minor + 1)).0"
              ;;
            patch)
              NEW_VERSION="${major}.${minor}.$((patch + 1))"
              ;;
            *)
              NEW_VERSION="${major}.${minor}.$((patch + 1))"
              ;;
          esac

          echo "Bumping version from $CURRENT_VERSION to $NEW_VERSION"

          # Update the TOC file with the new version
          sed -i "s/^## Version: .*$/## Version: ${NEW_VERSION}/" PeaversTalents.toc

          # Configure git
          git config user.name "${{ github.repository_owner }}"
          git config user.email "${{ github.repository_owner }}@users.noreply.github.com"

          # Commit and tag the new version
          git add PeaversTalents.toc
          git commit -m "chore: Update TOC version to ${NEW_VERSION}"
          git tag -a "PeaversTalents-${NEW_VERSION}" -m "Release ${NEW_VERSION}"

          # Push commit and tag
          git push origin HEAD:master
          git push origin "PeaversTalents-${NEW_VERSION}"

          echo "new_version=${NEW_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Package and upload to CurseForge
        if: steps.check_changes.outputs.should_bump == 'true'
        uses: BigWigsMods/packager@v2
        env:
          CF_API_KEY: ${{ secrets.CF_API_KEY }}
          GITHUB_OAUTH: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TITLE: ${{ steps.bump.outputs.new_version }}
        with:
          args: -g retail
